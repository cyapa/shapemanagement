{"version":3,"sources":["TabContainer.js","shapes/box.js","shapes/circle.js","shapes/triangle.js","ShapeApp.js","serviceWorker.js","index.js"],"names":["TabContainer","props","children","value","index","id","aria-labelledby","class","Box","p","idx","color","txt","onClick","style","float","width","height","padding","margin","boxShadow","isactive","borderRadius","display","justifyContent","alignItems","cursor","background","Circle","Triangle","btnactive","borderLeft","borderRight","borderBottom","colors","shapesnames","_a11yProps","Boolean","window","location","hostname","match","ReactDOM","render","React","useState","setValue","shape","shapes","setShapes","currentcolor","setColor","currentshape","setShape","selectedshapesidx","setSelect","_CreateShape","item","i","AppBar","position","Tabs","onChange","e","newval","aria-label","Tab","label","className","Button","variant","length","deleteidx","tempshapes","splice","map","randomcolor","Math","floor","random","randomshape","modifiedshapes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67eb3fd2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './static/css/tabcontainer.css';\r\n\r\nimport Box from '@material-ui/core/Box'; \r\nimport PropTypes from 'prop-types'; // To validate properties without TypeScript\r\n\r\nexport default function TabContainer(props) { \r\n    const { children, value, index } = props;\r\n  \r\n    return ( \r\n      <div\r\n        id={`tabpanel-${index}`}\r\n        aria-labelledby={`tab-${index}`}\r\n        class='container'\r\n      >\r\n        {value === index && <Box p={3}>{children}</Box>}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  TabContainer.propTypes = {\r\n    children: PropTypes.node, // Accepts anything that can be rendered\r\n    index: PropTypes.any.isRequired, // Index is required to handle tabs size & navigation\r\n    value: PropTypes.any.isRequired, // Tab container content\r\n  };","import React from 'react';\r\nimport PropTypes from 'prop-types'; // To validate properties without TypeScript\r\n\r\nexport default function Box(props) {\r\n    const { idx,color,txt,onClick,isactive } = props;\r\n\r\n    //If the button is clicked(active), then show a shadow\r\n    const btnactive = isactive ?'0 5px 5px #424242, 0 6px 6px #424242':''\r\n\r\n    const style = {\r\n      float:'left',\r\n      width: '130px',\r\n      height: '90px',\r\n      padding: '10px 10px 10px 10px',\r\n      margin: '10px 10px 10px 10px',\r\n      boxShadow: btnactive,\r\n      borderRadius: '5px',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      cursor: 'pointer',\r\n      background: color // Take from Box properties\r\n    };\r\n\r\n      return (\r\n        <div id={idx} style={style} onClick={onClick} >\r\n          {txt}\r\n        </div>      \r\n      );\r\n    }\r\n  \r\n  Box.propTypes = {\r\n    idx: PropTypes.number, // Accepts a number. Not mandatory if not showed in screen1\r\n    color: PropTypes.string.isRequired, // Color code is mandatory\r\n    txt: PropTypes.string, // If the box should display something. In some cases numbers will be used instead of string\r\n  };\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'; // To validate properties without TypeScript\r\n\r\nexport default function Circle(props) {\r\n    const { idx,color,txt,onClick,isactive } = props;\r\n\r\n    //If the button is clicked(active), then show a shadow\r\n    const btnactive = isactive ?'0 5px 5px #424242, 0 6px 6px #424242':''\r\n\r\n    const style = {\r\n      float:'left',\r\n      width: '100px',\r\n      height: '100px',\r\n      padding: '10px 10px 10px 10px',\r\n      margin: '10px 10px 10px 10px',\r\n      boxShadow: btnactive,\r\n      borderRadius: '50%',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      cursor: 'pointer',\r\n      background: color // Take from Box properties\r\n    };\r\n\r\n      return (\r\n        <div id={idx} style={style} onClick={onClick} >\r\n          {txt}\r\n        </div>      \r\n      );\r\n    }\r\n  \r\n    Circle.propTypes = {\r\n    idx: PropTypes.number, // Accepts a number. Not mandatory if not showed in screen1\r\n    color: PropTypes.string.isRequired, // Color code is mandatory\r\n    txt: PropTypes.string, // If the box should display something. In some cases numbers will be used instead of string\r\n  };\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'; // To validate properties without TypeScript\r\n\r\nexport default function Triangle(props) {\r\n    const { idx,color,txt,onClick,isactive } = props;\r\n\r\n    //If the button is clicked(active), then show a shadow\r\n    const btnactive = isactive ?'0 5px 5px #424242, 0 6px 6px #424242':''\r\n\r\n    const style = {\r\n      float:'left',\r\n      width: '0',\r\n      height: '0',\r\n      borderLeft: '50px solid transparent',\r\n      borderRight: '50px solid transparent',\r\n      borderBottom:`100px solid ${color}`,\r\n      boxShadow: btnactive,\r\n      cursor: 'pointer',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      margin: '10px 10px 10px 10px',\r\n    };\r\n\r\n      return (\r\n        <div id={idx} style={style} onClick={onClick} >\r\n          {txt}\r\n        </div>      \r\n      );\r\n    }\r\n  \r\n    Triangle.propTypes = {\r\n    idx: PropTypes.number, // Accepts a number. Not mandatory if not showed in screen1\r\n    color: PropTypes.string.isRequired, // Color code is mandatory\r\n    txt: PropTypes.string, // If the box should display something. In some cases numbers will be used instead of string\r\n  };\r\n\r\n","import React from 'react';\r\nimport './static/css/shapesapp.css';\r\n\r\n// Import internally developed components\r\nimport TabContainer from './TabContainer'\r\nimport Box from './shapes/box'\r\nimport Circle from './shapes/circle'\r\nimport Triangle from './shapes/triangle'\r\n\r\n//Import Material-UI components\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n//Colors & shapes to be shown\r\nconst colors =['LIGHTCORAL','LIGHTPINK','MOCCASIN','PALEGOLDENROD','PLUM','SLATEBLUE','SEAGREEN','STEELBLUE','DARKTURQUOISE','BURLYWOOD','PERU','SILVER','SLATEGRAY','MISTYROSE','ANTIQUEWHITE','ROSYBROWN','CORNFLOWERBLUE']\r\nconst shapesnames = ['box','triangle','circle'];\r\n\r\nfunction _a11yProps(index) {\r\n  return {\r\n    id: `tab-${index}`,\r\n    'aria-controls': `tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nexport default function ShapesTabs() {\r\n\r\n  const initcolor = 'STEELBLUE';\r\n  const initshape = 'box';\r\n  const [value, setValue] = React.useState(0);\r\n  const [shapes, setShapes] = React.useState([{id:0,color:initcolor,shape:initshape},{id:1,color:initcolor,shape:initshape},{id:2,color:initcolor,shape:initshape}]);\r\n  const [currentcolor, setColor] = React.useState(initcolor);\r\n  const [currentshape, setShape] = React.useState(initshape);\r\n  const [selectedshapesidx, setSelect] = React.useState(-1);\r\n\r\n  const _handleChange = (e, newval) => {\r\n    setValue(newval);\r\n  };\r\n  \r\n  //Randomly change the color uisng the color preset\r\n  const _toggleColorAndShape = () => {\r\n    let randomcolor = colors[Math.floor(Math.random()*colors.length)]; \r\n    setColor(randomcolor);\r\n\r\n    let randomshape = shapesnames[Math.floor(Math.random()*shapes.length)];\r\n    setShape(randomshape);\r\n\r\n    //If a shape has been selected already\r\n    if(selectedshapesidx> -1 ){\r\n     let modifiedshapes = [...shapes];\r\n     modifiedshapes[selectedshapesidx].color = randomcolor; \r\n     modifiedshapes[selectedshapesidx].shape = randomshape;\r\n     setShapes(modifiedshapes);\r\n    }\r\n  };\r\n\r\n//Add new shape object to shapes array\r\n  const _addButton = () => {\r\n    setShapes(shapes => [...shapes, {id:shapes.length,color:currentcolor,shape:currentshape}]); \r\n  };\r\n                      \r\n  //Delete a shape\r\n  const _deleteButton = () => {\r\n    //Set last shape to be deleted\r\n    let deleteidx= shapes.length-1;\r\n\r\n    //Delete the selected shape\r\n    if(selectedshapesidx> -1 )\r\n      deleteidx=selectedshapesidx;\r\n\r\n    let tempshapes = [...shapes];\r\n    tempshapes.splice(deleteidx, 1);\r\n    setShapes(tempshapes);\r\n    setSelect(-1);\r\n  };\r\n\r\n //Display shapes count\r\n const _DisplayShapeCount = () => {\r\n\r\n  if(shapes.length>0)\r\n    return <div class='shape-control-txt'>There are {shapes.length} shape(s)</div>;\r\n  \r\n  return <div class='shape-control-txt'>There are no shapes to display</div>;\r\n};\r\n\r\nconst _CreateShape = (item,i) => {\r\n\r\n  if (item.shape ==='triangle')\r\n   return (<Triangle\r\n      idx = {item.id} \r\n      color={item.color} \r\n      isactive={i === selectedshapesidx} \r\n      onClick={() => setSelect(i)} \r\n      txt={i}\r\n      /> )\r\n   else if (item.shape ==='circle')\r\n    return (<Circle\r\n      idx = {item.id} \r\n      color={item.color} \r\n      isactive={i === selectedshapesidx} \r\n      onClick={() => setSelect(i)} \r\n      txt={i}\r\n      /> )\r\n    else\r\n      return (<Box\r\n        idx = {item.id} \r\n        color={item.color} \r\n        isactive={i === selectedshapesidx} \r\n        onClick={() => setSelect(i)} \r\n        txt={i}\r\n      /> )\r\n}\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\">\r\n        <Tabs value={value} onChange={_handleChange} aria-label=\"Shape tabs\" class='tabs'>        \r\n          <Tab label=\"Shapes\" {..._a11yProps(0)}></Tab>         \r\n          <Tab label=\"Select Shape & Color\" {..._a11yProps(1)} />        \r\n          <Tab label=\"Summary\" {..._a11yProps(2)} />\r\n        </Tabs>\r\n      </AppBar>\r\n\r\n{/*  1st tab showcase the list of shapes */}\r\n      <TabContainer value={value} index={0}>\r\n        <div class='shape-control'>\r\n          <div className='btn'><Button variant=\"contained\" onClick={_addButton}> Add</Button></div>\r\n          <div className='btn'><Button variant=\"contained\" onClick={_deleteButton} color=\"secondary\"> Delete</Button></div>\r\n          <div className='btn'><Button variant=\"contained\" onClick={() => setSelect(-1)}> Deselect All</Button></div>\r\n        </div>\r\n        {shapes.map((item, i) => \r\n          <div> \r\n            {_CreateShape(item,i)}     \r\n          </div>\r\n        )}\r\n        {_DisplayShapeCount()}  \r\n      </TabContainer>\r\n\r\n{/*  2nd tab allows the users to change the color */}\r\n      <TabContainer value={value} index={1}>\r\n        <div className='shape-wrap' >\r\n          <Box color={currentcolor} onClick={_toggleColorAndShape} txt={currentcolor} ></Box>  \r\n          {_CreateShape(\r\n            {id:0,\r\n            color:currentcolor,\r\n            shape:currentshape,\r\n            txt:{currentcolor},\r\n            isactive:true\r\n            })\r\n            }    \r\n        </div>      \r\n      </TabContainer>\r\n\r\n{/*  3rd tab shows the summary of user actions */}\r\n      <TabContainer value={value} index={2}>\r\n        <div>\r\n          <div class='shape-control-txt'>Total Shapes : {shapes.length}</div>\r\n          <div class='shape-control-txt'>Current Color : {currentcolor}</div>  \r\n        </div>\r\n      </TabContainer>\r\n    </div>\r\n  );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport ShapeApp from './ShapeApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<ShapeApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}