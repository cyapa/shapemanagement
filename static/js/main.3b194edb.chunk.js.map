{"version":3,"sources":["TabContainer.js","shapes/box.js","shapes/circle.js","shapes/triangle.js","ShapeApp.js","serviceWorker.js","index.js"],"names":["TabContainer","props","children","value","index","id","aria-labelledby","class","Box","p","idx","color","txt","onClick","style","float","width","height","padding","margin","boxShadow","isactive","borderRadius","display","justifyContent","alignItems","cursor","background","Circle","Triangle","borderLeft","borderRight","borderBottom","colors","a11yProps","Boolean","window","location","hostname","match","ReactDOM","render","React","useState","setValue","boxes","setBoxs","currentcolor","setColor","selectedboxidx","setSelect","AppBar","position","Tabs","onChange","e","newval","aria-label","Tab","label","className","Button","variant","length","deleteidx","tempBoxes","splice","map","item","i","randomcolor","Math","floor","random","modifiedboxes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b194edb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './static/css/tabcontainer.css';\r\n\r\nimport Box from '@material-ui/core/Box'; \r\nimport PropTypes from 'prop-types'; // To validate properties without TypeScript\r\n\r\nexport default function TabContainer(props) { \r\n    const { children, value, index } = props;\r\n  \r\n    return ( \r\n      <div\r\n        id={`tabpanel-${index}`}\r\n        aria-labelledby={`tab-${index}`}\r\n        class='container'\r\n      >\r\n        {value === index && <Box p={3}>{children}</Box>}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  TabContainer.propTypes = {\r\n    children: PropTypes.node, // Accepts anything that can be rendered\r\n    index: PropTypes.any.isRequired, // Index is required to handle tabs size & navigation\r\n    value: PropTypes.any.isRequired, // Tab container content\r\n  };","import React from 'react';\r\nimport PropTypes from 'prop-types'; // To validate properties without TypeScript\r\n\r\nexport default function Box(props) {\r\n    const { idx,color,txt,onClick,isactive } = props;\r\n\r\n    //If the button is clicked(active), then show a shadow\r\n    const btnactive = isactive ?'0 5px 5px #424242, 0 6px 6px #424242':''\r\n\r\n    const style = {\r\n      float:'left',\r\n      width: '130px',\r\n      height: '90px',\r\n      padding: '10px 10px 10px 10px',\r\n      margin: '10px 10px 10px 10px',\r\n      boxShadow: btnactive,\r\n      borderRadius: '5px',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      cursor: 'pointer',\r\n      background: color // Take from Box properties\r\n    };\r\n\r\n      return (\r\n        <div id={idx} style={style} onClick={onClick} >\r\n          {txt}\r\n        </div>      \r\n      );\r\n    }\r\n  \r\n  Box.propTypes = {\r\n    idx: PropTypes.number, // Accepts a number. Not mandatory if not showed in screen1\r\n    color: PropTypes.string.isRequired, // Color code is mandatory\r\n    txt: PropTypes.string, // If the box should display something. In some cases numbers will be used instead of string\r\n  };\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'; // To validate properties without TypeScript\r\n\r\nexport default function Circle(props) {\r\n    const { idx,color,txt,onClick,isactive } = props;\r\n\r\n    //If the button is clicked(active), then show a shadow\r\n    const btnactive = isactive ?'0 5px 5px #424242, 0 6px 6px #424242':''\r\n\r\n    const style = {\r\n      float:'left',\r\n      width: '100px',\r\n      height: '100px',\r\n      padding: '10px 10px 10px 10px',\r\n      margin: '10px 10px 10px 10px',\r\n      boxShadow: btnactive,\r\n      borderRadius: '50%',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      cursor: 'pointer',\r\n      background: 'blue' // Take from Circle properties\r\n    };\r\n\r\n      return (\r\n        <div id={idx} style={style} onClick={onClick} >\r\n          {txt}\r\n        </div>      \r\n      );\r\n    }\r\n  \r\n    Circle.propTypes = {\r\n    idx: PropTypes.number, // Accepts a number. Not mandatory if not showed in screen1\r\n    color: PropTypes.string.isRequired, // Color code is mandatory\r\n    txt: PropTypes.string, // If the box should display something. In some cases numbers will be used instead of string\r\n  };\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'; // To validate properties without TypeScript\r\n\r\nexport default function Triangle(props) {\r\n    const { idx,color,txt,onClick,isactive } = props;\r\n\r\n    //If the button is clicked(active), then show a shadow\r\n    const btnactive = isactive ?'0 5px 5px #424242, 0 6px 6px #424242':''\r\n\r\n    const style = {\r\n      float:'left',\r\n      width: '0',\r\n      height: '0',\r\n      borderLeft: '50px solid transparent',\r\n      borderRight: '50px solid transparent',\r\n      borderBottom: '100px solid #555',\r\n      cursor: 'pointer',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      margin: '10px 10px 10px 10px'\r\n\r\n      // background: 'blue' // Take from Circle properties\r\n    };\r\n\r\n      return (\r\n        <div id={idx} style={style} onClick={onClick} >\r\n          {txt}\r\n        </div>      \r\n      );\r\n    }\r\n  \r\n    Triangle.propTypes = {\r\n    idx: PropTypes.number, // Accepts a number. Not mandatory if not showed in screen1\r\n    color: PropTypes.string.isRequired, // Color code is mandatory\r\n    txt: PropTypes.string, // If the box should display something. In some cases numbers will be used instead of string\r\n  };\r\n\r\n","import React from 'react';\nimport './static/css/shapesapp.css';\n\n// Import internally developed components\nimport TabContainer from './TabContainer'\nimport Box from './shapes/box'\nimport Circle from './shapes/circle'\nimport Triangle from './shapes/triangle'\n\n//Import Material-UI components\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Button from '@material-ui/core/Button';\n\n\n//Box colors to be shown\n//const colors =['#01579b','#bf360c','#ffd600','#1b5e20','#ec407a','#9e9e9e','#8d6e63','#37474f','#00e676','#18ffff','#7e57c2']\nconst colors =['LIGHTCORAL','LIGHTPINK','MOCCASIN','PALEGOLDENROD','PLUM','SLATEBLUE','SEAGREEN','STEELBLUE','DARKTURQUOISE','BURLYWOOD','PERU','SILVER','SLATEGRAY','MISTYROSE','ANTIQUEWHITE','ROSYBROWN','CORNFLOWERBLUE']\n\n\nfunction a11yProps(index) {\n  return {\n    id: `tab-${index}`,\n    'aria-controls': `tabpanel-${index}`,\n  };\n}\n\nexport default function BoxTabs() {\n\n  const initcolor = 'STEELBLUE';\n  const [value, setValue] = React.useState(0);\n  const [boxes, setBoxs] = React.useState([{id:0,color:initcolor},{id:1,color:initcolor},{id:2,color:initcolor}]);\n  const [currentcolor, setColor] = React.useState(initcolor);\n  const [selectedboxidx, setSelect] = React.useState(-1);\n\n  const _handleChange = (e, newval) => {\n    setValue(newval);\n  };\n  \n  //Randomly change the color uisng the color preset\n  const _toggleColor = () => {\n    let randomcolor = colors[Math.floor(Math.random()*colors.length)]; \n    setColor(randomcolor);\n\n    if(selectedboxidx> -1 ){\n     let modifiedboxes = [...boxes];\n     modifiedboxes[selectedboxidx].color = randomcolor; \n     setBoxs(modifiedboxes);\n    }\n  };\n\n//Add new box object to Boxes Array\n  const _addBtn = () => {\n    setBoxs(boxes => [...boxes, {id:boxes.length,color:currentcolor}]); \n  };\n                      \n  //Delete Box\n  const _dltBtn = () => {\n    //Set last box to be deleted\n    var deleteidx= boxes.length-1;\n\n    //Delete the selected box\n    if(selectedboxidx> -1 )\n      deleteidx=selectedboxidx;\n\n    let tempBoxes = [...boxes];\n    tempBoxes.splice(deleteidx, 1);\n    setBoxs(tempBoxes);\n    //setBoxs(boxes.filter((e)=>(e.id !== deleteidx)))  //Error porne!\n    setSelect(-1);\n  };\n\n //Display box count\n const _DisplayBoxCount = () => {\n\n  if(boxes.length>0)\n    return <div class='box-control-txt'>There are {boxes.length} boxe(s)</div>;\n  \n  return <div class='box-control-txt'>There are no boxes to display</div>;\n};\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Tabs value={value} onChange={_handleChange} aria-label=\"Box tabs\" class='tabs'>        \n          <Tab label=\"Boxes\" {...a11yProps(0)}></Tab>         \n          <Tab label=\"Select Color\" {...a11yProps(1)} />        \n          <Tab label=\"Summary\" {...a11yProps(2)} />\n        </Tabs>\n      </AppBar>\n\n{/*  1st tab showcase the list of boxes */}\n      <TabContainer value={value} index={0}>\n        <div class='box-control'>\n          <div className='btn'><Button variant=\"contained\" onClick={_addBtn}> Add</Button></div>\n          <div className='btn'><Button variant=\"contained\" onClick={_dltBtn} color=\"secondary\"> Delete</Button></div>\n          <div className='btn'><Button variant=\"contained\" onClick={() => setSelect(-1)}> Deselect All</Button></div>\n        </div>\n        {boxes.map((item, i) => \n             <div> \n               <Box\n                idx = {item.id} \n                color={item.color} \n                isactive={i === selectedboxidx} \n                onClick={() => setSelect(i)} \n                txt={i}\n                /> \n              </div>\n        )}\n        {_DisplayBoxCount()}\n        <Circle>test</Circle>\n        <Triangle>Test</Triangle>\n      </TabContainer>\n\n{/*  2nd tab allows the users to change the color */}\n      <TabContainer value={value} index={1}>\n        <div className='box-wrap' >\n          <Box color={currentcolor} onClick={_toggleColor} txt={currentcolor} isactive={true}></Box>    \n        </div>      \n      </TabContainer>\n\n{/*  3rd tab shows the summary of user actions */}\n      <TabContainer value={value} index={2}>\n        <div>\n          <div class='box-control-txt'>Total Boxes : {boxes.length}</div>\n          <div class='box-control-txt'>Curent Color : {currentcolor}</div>  \n        </div>\n      </TabContainer>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ShapeApp from './ShapeApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ShapeApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}